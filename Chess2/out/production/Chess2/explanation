
Each class in your chess game serves a specific purpose in the overall functionality of the game. Here's what each class does:

Piece Class
This class represents a chess piece. Each Piece object has a type (like Pawn, Rook, etc.), a color (black or white),
 a current position on the board (represented by a Cell object), and a flag isCaptured indicating whether the piece has been captured.

getType() & getColor(): Return the type and color of the piece.
moveTo(Cell newPosition): Attempts to move the piece to a new position. If the move is valid (checked by isValid method),
 it updates the current position and marks the piece as selected.
isValid(Cell from, Cell to): Checks if a move is valid according to the rules of the particular piece.
isCaptured() & setCaptured(boolean captured): Get and set the captured status of the piece.



Cell Class
This class represents a cell on the chessboard. It holds the coordinates (x, y),
 the color of the cell (since a chessboard is checkered), and may also hold a reference to a Piece if there is one present on the cell.
 The isSelected flag indicates if this cell is currently selected in the UI.

getX() & getY(): Return the x and y coordinates of the cell on the board.
getColor(): Returns the color of the cell.
isSelected() & setSelected(boolean selected): Get and set the selection status of the cell.
getPiece() & setPiece(Piece piece): Get and set the Piece that is currently on the cell.


Board Class
This class represents the chessboard. It is a collection of Cell objects arranged in an 8x8 grid,
 and also maintains a parallel 2D array of Piece objects that corresponds to the pieces on the board.

createCells(): Initializes the Cell objects for each position on the board, setting the color as white or black in a checkered pattern.
placePieces(): Places Piece objects on the board in their initial positions.
setupPiece(String type, String color, int x, int y): A helper method used by placePieces() to set up a piece on the board.
getCell(int x, int y): Returns the Cell object at the specified coordinates.


Game Class
This is the main class that brings all components together. It extends JFrame, making it a Swing GUI window.

initializeGUI(): Sets up the GUI window, including the title, size, default close operation, layout, and it initializes the board.
initializeBoard(): Creates a grid of buttons on the GUI, each representing a cell on the board.
It sets up the visual representation of the board and attaches action listeners to handle user interaction.
updateButtonLabel(JButton button, Piece piece): Updates the visual label of the button based on the Piece it represents.
 It has been modified to set icons representing the chess pieces instead of text.
handleButtonAction(ActionEvent e, Cell cell): Handles the action when a cell (button) is clicked. Here is where you would implement the logic for selecting pieces and moving them.
main(String[] args): The entry point of the program that creates an instance of Game and displays the GUI.
When you run the Game class, it creates the game window with an 8x8 grid of buttons. Each button is associated with a Cell in the Board,
 and if a Piece is present on that Cell, the button displays an image for that piece. The Board initializes the game state with pieces in their starting positions,
 and the Cell objects hold the state of each square on the board (empty or occupied by a piece).
The Piece class provides the functionality for moving pieces around and checking whether the moves are valid according to the rules of chess.